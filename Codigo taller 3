/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled 2"
  https://create.arduino.cc/cloud/things/0a4c2b04-9a08-4da2-aa8e-9714724b1c92 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  float potentiometer;
  CloudTemperatureSensor temperature;
  bool motordir;
  bool motoronoff;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#define temperatura 34
#define potenciometro 35
#define in1 18
#define in2 19 


void setup() {
  pinMode(in1, OUTPUT);
  pinMode(in2, OUTPUT);
  digitalWrite(in1,LOW);
  digitalWrite(in2,LOW);
  pinMode(temperatura,INPUT);
  pinMode(potenciometro,INPUT);
  
  
  

 

  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(5000); 

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information you’ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

void loop() {
  
  ArduinoCloud.update();
  // Your code here 
  
    // Leer temperatura desde LM35
  int temperaturavalor = analogRead(temperatura);
  temperature = ((3.3*temperaturavalor*100.0)/4095.0);
  Serial.println(temperature);

  // Leer valor del potenciómetro
  int potValue = analogRead(potenciometro);
  potentiometer = map(potValue, 0, 4095, 0, 100);
  Serial.println(potentiometer);
  delay(500); //delay del potenciometro
  // Control del motor desde la nube
  if (motoronoff) {
    if (motordir) {
      digitalWrite(in1,HIGH); // Gira en una dirección (IN1 = HIGH, IN2 = LOW)
      digitalWrite(in2,LOW);
    } else {
      digitalWrite(in1,LOW);  // Gira en la dirección opuesta (IN1 = LOW, IN2 = HIGH)
      digitalWrite(in2,HIGH);
    }
  } else {
    // Apaga el motor si motorOn es falso
    digitalWrite(in1,LOW);
    digitalWrite(in2,LOW);

  }
}


/*
  Since Temperature is READ_WRITE variable, onTemperatureChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onTemperatureChange()  {
  // Add your code here to act upon Temperature change
}

/*
  Since Potentiometer is READ_WRITE variable, onPotentiometerChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onPotentiometerChange()  {
  // Add your code here to act upon Potentiometer change
}

/*
  Since Motoronoff is READ_WRITE variable, onMotoronoffChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onMotoronoffChange()  {
  // Add your code here to act upon Motoronoff change
  digitalWrite(in1,LOW);  // Gira en la dirección opuesta (IN1 = LOW, IN2 = HIGH)
  digitalWrite(in2,HIGH);
}

/*
  Since Motorizq is READ_WRITE variable, onMotorizqChange() is
  executed every time a new value is received from IoT Cloud.
*/


/*
  Since Motordir is READ_WRITE variable, onMotordirChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onMotordirChange()  {
  // Add your code here to act upon Motordir change
}
